Nested Data Structure Exercise
1.	Given the following nested object:

var nestedData = {
    innerData: {
        order: ["first", "second", "third"],
        snacks: ["chips", "fruit", "crackers"],
        numberData: {
            primeNumbers: [1,3,5,7,9],
            fibonnaci: [1,1,2,3,5,8,13]
        },
        addSnack: function(snack){
            this.snacks.push(snack);
            return this;
        }
    }
}

// 1.1 Using a for loop, console.log all of the numbers in the primeNumbers array.

solution
for (var i = 0; i < nestedData.innerData.numberData.primeNumbers.length; i++) {
    console.log(nestedData.innerData.numberData.primeNumbers[i])
}

// 1.2 Using a for loop, console.log all of the even Fibonnaci numbers.
solution
var fibArray = nestedData.innerData.numberData.fibonnaci

for (var i = 0; i < fibArray.length; i++) {
    if(fibArray[i] % 2 === 0){
        console.log(fibArray[i])
    }
}

// 1.3 Console.log the value "second" inside the order array.

solution
console.log(nestedData.innerData.order[1])

// 1.4 Invoke the addSnack function and add the snack "chocolate".

solution
nestedData.innerData.addSnack("Chocolate")

// 1.5 Inside of the addSnack function there is a special keyword called this. What does the word this refer to
 inside the addSnack function

solution
he value of this is determined by how a function is called (runtime binding). It can't be set by assignment during 
execution, and it may bedifferent each time the function is called.

 2.	Given the following nested object:


var nestedObject = {
  speakers: [{name:"Elie"},{name:"Tim"},{name:"Matt"}],
  data: {
    continents: {
      europe: {
        countries: {
          switzerland: {
            capital: "Bern",
            population: 8000000
          }
        }
      }
    },
    languages: {
      spanish: {
          hello: "Hola"
      },
      french: {
          hello: "Bonjour"
      }
    }
  }
}
2.1 Write a function addSpeaker to add a speaker to the array of speakers. 
The speaker you add must be an object with a key of name and a value of whatever you'd like.

Solution
function addSpeaker(speakerName){
  nestedObject.speakers.push({
    name: speakerName
  })
}
2.2  Write a function addLanguage that adds a language to the languages object. The language object you add should have a
 key with the name of the language and the value of another object with a key of "hello" and a value of however you spell 
"hello" in the language you add.

Solution
function addLanguage(language, helloInLanguage){
  nestedObject.data.languages[language] = {
    hello: helloInLanguage
  }
}
2.3 Write a function addCountry that adds a European country to the countries object (inside of the continents object,
 inside of the countries object). The country you add should be an object with the key as name of the country and the
 value as an object with the keys of "capital" and "population" and their respective values.
Solution
function addCountry(name, capital, population){
  nestedObject.data.continents.europe.countries[name] = {
    capital: capital,
    population: population
  }
}

3. Write a function called rotate which takes an array and a number, and moves each element however many spaces 
the number is to the right. For the value at the end of the array, rotate should move it back to the beginning.
rotate([1,2,3], 1) // [3,1,2]
rotate([1,2,3], 2) // [2,3,1]
rotate([1,2,3], 3) // [1,2,3]

Solution
function rotate(arr, num){
    var amount = num % arr.length;
    for(var i=0; i< amount; i++){
      arr.unshift(arr.pop());
    }
    return arr;
}

4. Write a function called makeXOGrid which takes in two parameters, rows and columns, and returns an array of arrays
   with the number of values in each subarray equal to the columns parameter and the number of subarrays equal to the 
  rows parameter. The values in the sub-arrays should switch between "X" and "O".
  makeXOGrid(1,4) 

solution
function makeXOGrid(rows,amount){
    var finalArr = []
    var startWithX = true
    for(var i=0; i<rows; i++){
        var newRow = []
        for(var j=0; j<amount; j++){
            if(startWithX){
                newRow.push("X")
            }
            else {
                newRow.push("O")
            }
            startWithX = !startWithX
        }
        finalArr.push(newRow)
    }
    return finalArr;
}